from typing import List, Optional
from datetime import datetime
import logging

from ..domain.entities import PhraseAnalysis, EmotionalState, ExamplePhrase, UserInteraction
from ..domain.value_objects import AnalysisRequest, EmotionalContext
from ..domain.examples import PhraseExamples
from ..infrastructure.anthropic_client import AnthropicAnalyzer


logger = logging.getLogger(__name__)


class PhraseAnalysisService:
    
    def __init__(self, anthropic_analyzer: AnthropicAnalyzer):
        self.analyzer = anthropic_analyzer
        self.examples = PhraseExamples()
    
    async def analyze_phrase(self, request: AnalysisRequest) -> PhraseAnalysis:
        try:
            logger.info(f"Analyzing phrase: {request.phrase[:50]}...")
            
            similar_examples = self.examples.find_similar(request.phrase)
            
            analysis = await self.analyzer.analyze(
                phrase=request.phrase,
                context=request.context,
                age_range=request.child_age_range,
                similar_examples=similar_examples
            )
            
            return analysis
            
        except Exception as e:
            logger.error(f"Error analyzing phrase: {e}")
            return self._create_fallback_analysis(request.phrase)
    
    def get_examples(self) -> List[ExamplePhrase]:
        return self.examples.get_common_phrases()
    
    def get_example_by_phrase(self, phrase: str) -> Optional[ExamplePhrase]:
        examples = self.examples.get_common_phrases()
        for example in examples:
            if example.phrase.lower() == phrase.lower():
                return example
        return None
    
    def _create_fallback_analysis(self, phrase: str) -> PhraseAnalysis:
        return PhraseAnalysis(
            original_phrase=phrase,
            emotional_state=[EmotionalState.CONFUSED],
            true_meaning="–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.",
            child_needs="–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            suggested_responses=[
                "–Ø –≤–∏–∂—É, —á—Ç–æ —Ç–µ–±–µ —Å–ª–æ–∂–Ω–æ. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ.",
                "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?"
            ],
            what_to_avoid=[
                "–ù–µ –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —á—É–≤—Å—Ç–≤–∞",
                "–ù–µ –¥–∞–≤–∏—Ç–µ –Ω–∞ —Ä–µ–±—ë–Ω–∫–∞"
            ],
            confidence_score=0.3,
            analyzed_at=datetime.now()
        )


class InteractionService:
    
    def __init__(self):
        self.interactions: List[UserInteraction] = []
    
    def record_interaction(
        self, 
        user_id: int, 
        phrase: str, 
        analysis: Optional[PhraseAnalysis] = None
    ) -> UserInteraction:
        interaction = UserInteraction(
            user_id=user_id,
            phrase=phrase,
            analysis=analysis,
            timestamp=datetime.now()
        )
        self.interactions.append(interaction)
        return interaction
    
    def get_user_interactions(self, user_id: int) -> List[UserInteraction]:
        return [i for i in self.interactions if i.user_id == user_id]
    
    def add_feedback(self, user_id: int, feedback: str) -> bool:
        user_interactions = self.get_user_interactions(user_id)
        if user_interactions:
            latest = user_interactions[-1]
            latest.feedback = feedback
            return True
        return False


class ResponseFormatterService:
    
    @staticmethod
    def format_analysis(analysis: PhraseAnalysis) -> str:
        # Format emotions in Russian
        emotion_names = {
            "angry": "–∑–ª–æ—Å—Ç—å",
            "frustrated": "—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ", 
            "sad": "–≥—Ä—É—Å—Ç—å",
            "anxious": "—Ç—Ä–µ–≤–æ–≥–∞",
            "defensive": "–∑–∞—â–∏—â—ë–Ω–Ω–æ—Å—Ç—å",
            "overwhelmed": "–ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å",
            "disconnected": "–æ—Ç—á—É–∂–¥–µ–Ω–∏–µ",
            "confused": "—Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å"
        }
        emotions = ", ".join([emotion_names.get(e.value, e.value) for e in analysis.emotional_state])
        
        responses = "\n".join([f"‚Ä¢ {r}" for r in analysis.suggested_responses])
        avoid = "\n".join([f"‚Ä¢ {a}" for a in analysis.what_to_avoid])
        
        # Check if there's a safety section in the response
        safety_text = ""
        if hasattr(analysis, 'safety_notice') and analysis.safety_notice:
            safety_text = f"""üö® –°–†–û–ß–ù–û –û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:
{analysis.safety_notice}

"""
        
        return f"""üîç –ê–Ω–∞–ª–∏–∑ —Ñ—Ä–∞–∑—ã: "{analysis.original_phrase}"
{safety_text}
üìä –ß–¢–û –†–ï–ë–Å–ù–û–ö –ß–£–í–°–¢–í–£–ï–¢:
{emotions.capitalize()}

üí≠ –ß–¢–û –ù–ê –°–ê–ú–û–ú –î–ï–õ–ï –û–ó–ù–ê–ß–ê–ï–¢:
{analysis.true_meaning}

üéØ –ü–û–¢–†–ï–ë–ù–û–°–¢–¨ –†–ï–ë–Å–ù–ö–ê:
{analysis.child_needs}

üí¨ –ö–ê–ö –õ–£–ß–®–ï –û–¢–í–ï–¢–ò–¢–¨:
{responses}

‚ö†Ô∏è –ß–ï–ì–û –ò–ó–ë–ï–ì–ê–¢–¨:
{avoid}"""
    
    @staticmethod
    def format_example(example: ExamplePhrase) -> str:
        return f"""üìö –ü—Ä–∏–º–µ—Ä —Ñ—Ä–∞–∑—ã: "{example.phrase}"

üé≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
{example.emotional_context}

üí≠ –¢–∏–ø–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
{example.typical_meaning}

üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ–¥—Ö–æ–¥:
{example.suggested_approach}"""
    
    @staticmethod
    def format_error_message() -> str:
        return """‚ö†Ô∏è –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.

–í–æ–∑–º–æ–∂–Ω–æ, —Ñ—Ä–∞–∑–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª–Ω—É—é —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä—É—é —Å–∫–∞–∑–∞–ª —Ä–µ–±—ë–Ω–æ–∫."""